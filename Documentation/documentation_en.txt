this document generally explains the role of each class in this project

/////////////////////////////////////////////////////////////////////////
//						Classes list								   //
/////////////////////////////////////////////////////////////////////////
	1-GameCore
	2-WindowHandler
	3-GameScene
	4-Actor
	5-Drawable 
	6-Updatable
	7-DnU
	8-Light 
	9-Camera
	10-StaticModel
	11-DynamicModel
	12-Terrain
	13-Effect
	14-Player
	15-Enemy
	16-Shot
	17-HOPE
	18-EnergyBullet
	19-Laser(beam)
	20-Chaser
	21-Boss
	22-UFO
	23-Cannon
	24-Suicidal
	25-CUBE
	26-GraphicsEngine
	27-GameLogic
	28-EventSystem
	29-PhysicsEngine
	30-SoundEngine
	
/////////////////////////////////////////////////////////////////////////
//						1-GameCore								   	   //
/////////////////////////////////////////////////////////////////////////
this the Core of our system. the class deals with the creation,initialization and destrucion(by Destruction i mean
Free Resources) of the main classes in the System. this class hnadles the game Loop too.


/////////////////////////////////////////////////////////////////////////
//						2-WindowHandler								   //
/////////////////////////////////////////////////////////////////////////
this class made to handle the system Window operations including Creation,Resize,switch between windowed mode 
andFullScreen and Destruction.the Real window is created by SDL2which is a cross Platform library that helps
creating Cross Platform software.

 
/////////////////////////////////////////////////////////////////////////
//						3-GameScene								   	   //
/////////////////////////////////////////////////////////////////////////
GameScene is logic representation to the GameWorld. this class Contains a vector which stock reference of the object
that could be inserted in the game world.these objects' classes should extends Actor or other child class of Actor.

 
/////////////////////////////////////////////////////////////////////////
//						4-Actor								   		   //
/////////////////////////////////////////////////////////////////////////
this is the base class that represent any object that could be inserted in the game Scene(world) and define the common
operation that could be applied on any object in a 3D Space.this class has no use without m_ID attribut.m_ID helps to 
Knows what type of the Actor in game Scene so we could convert the reference type and use the right methods.
the current IDs are:
-Drawable
-Updatable
-Light
-Camera
-PhysicalObject


/////////////////////////////////////////////////////////////////////////
//						5-Drawable 								       //
/////////////////////////////////////////////////////////////////////////
this abstract class represent a particlar Actor type which is Drawable(which mean has Draw Method)
any class inherit from this class should define the draw method(define how the Actor should be drawn).
the Draw Method is used by the GraphicsEngine.


/////////////////////////////////////////////////////////////////////////
//						6-Updatable 								   //
/////////////////////////////////////////////////////////////////////////
this abstract class represent a particular Actor type which is updatable or Dynamic (which mean has update method)
and any class inherit from from this class should define the update method(define how the actor should update it self)
the Update Method is used by the GameLogic.


/////////////////////////////////////////////////////////////////////////
//						7-DnU 								       	   //
/////////////////////////////////////////////////////////////////////////
this class is a combination of the two previous classes(Drawable and Updatable).
this class is abstract too,any class inherit from this class should define both Draw and Update mehods.



/////////////////////////////////////////////////////////////////////////
//						8-Light 								       //
/////////////////////////////////////////////////////////////////////////
all i can say about this class that it represents any light type inserted in the GameScene


/////////////////////////////////////////////////////////////////////////
//						10-StaticModel							       //
/////////////////////////////////////////////////////////////////////////
StaticModel is the logic representation of a static 3d Model and by static i mean that the model can be animated
the 3d model is based on Meshes(Parts) which is a constructed of points,each point has 3d coordinates in a local
3d Space which will be transformaed to the Game World by a transformation matrix,these points are linked together
triangles and each triangle has a Normal vertex needed for light operation and material.

  
/////////////////////////////////////////////////////////////////////////
//						11-DynamicModel 						       //
/////////////////////////////////////////////////////////////////////////
this class is abstract it inherit from StaticModel and Updatable to be able to animate the 3d Model.
any class that inherit from this class should define the update method.


/////////////////////////////////////////////////////////////////////////
//						12-Terrain								       //
/////////////////////////////////////////////////////////////////////////
in this project the terrain supposes to be infinite and to make it look infinite we're 
going to load one part of the terrain and copy in different positions in the wolrd , move them down,
to make it looks like that the player is flying in the air .(this is the current solution)

/////////////////////////////////////////////////////////////////////////
//						13-Effect								       //
/////////////////////////////////////////////////////////////////////////
effects are animated object(inherits from DynamicModel) that starts animation the instance the effect created
have life Duration.when the animation is completed the object will be destroyed.
 

/////////////////////////////////////////////////////////////////////////
//						14-Player 								       //
/////////////////////////////////////////////////////////////////////////
since the design is not completed yet.we didn't decide if the player will have a single ship to pilote or 
we give him the ability to choose a ship.we created this class to be the base class of any ship that will be
created in this project.this class inherit from DynamicModel.and override the Update Method to accept
the player input as a parameter.


/////////////////////////////////////////////////////////////////////////
//						15-Enemy 								       //
/////////////////////////////////////////////////////////////////////////
it represent the base class of any enemy type .what is special about this class that it contains a vector of
actions that we be done by the enemy. each action it own start instance.


/////////////////////////////////////////////////////////////////////////
//						16-Shot 								       //
/////////////////////////////////////////////////////////////////////////
base class of any type of shot.


/////////////////////////////////////////////////////////////////////////
//						17-HOPE								       	   //
/////////////////////////////////////////////////////////////////////////
this class represent the ship that could be pilated by the player and still thinking of its abilities
P.S: HOPE is the name of the ship.


/////////////////////////////////////////////////////////////////////////
//						18-EnergyBullet			  				       //
/////////////////////////////////////////////////////////////////////////
a type of shot: a bullet made od energy

/////////////////////////////////////////////////////////////////////////
//						19-Laser(beam) 								   //
/////////////////////////////////////////////////////////////////////////
Beam better describe this type of shot
/////////////////////////////////////////////////////////////////////////
//						20-Chaser 								       //
/////////////////////////////////////////////////////////////////////////
Chaser follow the enemy locked on until it hits it or it(Chaser) vanishes.

/////////////////////////////////////////////////////////////////////////
//						21-Boss 								       //
/////////////////////////////////////////////////////////////////////////
base class of any type of Boss.


/////////////////////////////////////////////////////////////////////////
//						22-UFO 								       	   //
/////////////////////////////////////////////////////////////////////////
a type of enemy.


/////////////////////////////////////////////////////////////////////////
//						23-Cannon								       //
/////////////////////////////////////////////////////////////////////////
a type of enemy that fire beam.


/////////////////////////////////////////////////////////////////////////
//						24-Suicidal 								   //
/////////////////////////////////////////////////////////////////////////
a type of enemy that that are fast and tries to hit the player's ship


/////////////////////////////////////////////////////////////////////////
//						25-CUBE							       		   //
/////////////////////////////////////////////////////////////////////////
the Boss of the first level. ican't describe it's behaviour here.but i will  when i have 
a clear idea about it.


/////////////////////////////////////////////////////////////////////////
//						26-GraphicsEngine							   //
/////////////////////////////////////////////////////////////////////////
the graphicsEngine is an objet that handles the graphics part of the system. it search for 
any drawable object in the scene and Call its Draw method.
/////////////////////////////////////////////////////////////////////////
//						27-GameLogic 								   //
/////////////////////////////////////////////////////////////////////////
gameLogic handle the level initialization, updating and destruction and provide for each created its
necessary paramater.

 
/////////////////////////////////////////////////////////////////////////
//						28-EventSystem 								   //
/////////////////////////////////////////////////////////////////////////
the main Job of EventSystem is to Capture SDL_Event and translate them to a more useful event structure.


/////////////////////////////////////////////////////////////////////////
//						29-PhysicsEngine							   //
/////////////////////////////////////////////////////////////////////////
the role is simple detects collision between physical objects using AABBs.(Encapsulate each  physical Object 
in a cube,check the collision between each 2 cubes).



/////////////////////////////////////////////////////////////////////////
//						30-SoundEngine 								   //
/////////////////////////////////////////////////////////////////////////
handle the sound part in the system which i'm still learning about it.

	
	


